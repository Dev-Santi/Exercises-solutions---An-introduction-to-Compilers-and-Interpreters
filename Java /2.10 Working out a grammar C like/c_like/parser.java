
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package c_like;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\004\000\002\002\003\000\002\003" +
    "\002\000\002\003\004\000\002\004\012\000\002\005\002" +
    "\000\002\005\003\000\002\005\005\000\002\006\002\000" +
    "\002\006\003\000\002\006\005\000\002\007\002\000\002" +
    "\007\004\000\002\010\004\000\002\011\004\000\002\011" +
    "\005\000\002\011\007\000\002\011\007\000\002\011\005" +
    "\000\002\011\007\000\002\011\005\000\002\011\011\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\006\000\002\012\005\000\002\013\004\000\002\013\004" +
    "\000\002\013\003\000\002\014\004\000\002\014\004\000" +
    "\002\014\004\000\002\014\003\000\002\015\005\000\002" +
    "\015\005\000\002\015\003\000\002\016\005\000\002\016" +
    "\005\000\002\016\003\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\003\000" +
    "\002\020\005\000\002\020\005\000\002\020\003\000\002" +
    "\021\005\000\002\021\003\000\002\022\005\000\002\022" +
    "\003\000\002\023\005\000\002\023\003\000\002\024\003" +
    "\000\002\025\003\000\002\026\003\000\002\027\003\000" +
    "\002\030\003\000\002\031\003\000\002\032\002\000\002" +
    "\032\003\000\002\032\005\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\170\000\016\002\uffff\031\uffff\032\uffff\036\uffff\040" +
    "\uffff\042\uffff\001\002\000\004\002\172\001\002\000\016" +
    "\002\000\031\007\032\006\036\014\040\013\042\012\001" +
    "\002\000\004\047\uffbe\001\002\000\004\047\uffbf\001\002" +
    "\000\004\047\015\001\002\000\016\002\ufffe\031\ufffe\032" +
    "\ufffe\036\ufffe\040\ufffe\042\ufffe\001\002\000\004\047\uffbb" +
    "\001\002\000\004\047\uffbc\001\002\000\004\047\uffbd\001" +
    "\002\000\004\004\016\001\002\000\016\005\ufffc\031\007" +
    "\032\006\036\014\040\013\042\012\001\002\000\004\047" +
    "\171\001\002\000\006\005\ufffb\010\167\001\002\000\004" +
    "\005\022\001\002\000\004\006\023\001\002\000\052\004" +
    "\ufff6\006\ufff6\007\ufff6\013\ufff6\014\ufff6\015\ufff6\031\ufff6" +
    "\032\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6\041" +
    "\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6\046\ufff6\047\ufff6" +
    "\001\002\000\052\004\033\006\032\007\031\013\027\014" +
    "\026\015\025\031\007\032\006\034\055\035\054\036\014" +
    "\037\053\040\013\041\052\042\012\043\050\044\041\045" +
    "\034\046\062\047\030\001\002\000\020\004\033\034\055" +
    "\041\052\044\041\045\034\046\062\047\030\001\002\000" +
    "\020\004\033\034\055\041\052\044\041\045\034\046\062" +
    "\047\030\001\002\000\020\004\033\034\055\041\052\044" +
    "\041\045\034\046\062\047\030\001\002\000\050\004\156" +
    "\005\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015" +
    "\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6" +
    "\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\001\002\000" +
    "\016\002\ufffd\031\ufffd\032\ufffd\036\ufffd\040\ufffd\042\ufffd" +
    "\001\002\000\052\004\ufff6\006\ufff6\007\ufff6\013\ufff6\014" +
    "\ufff6\015\ufff6\031\ufff6\032\ufff6\034\ufff6\035\ufff6\036\ufff6" +
    "\037\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\045" +
    "\ufff6\046\ufff6\047\ufff6\001\002\000\026\004\033\013\027" +
    "\014\026\015\025\034\055\041\052\044\041\045\034\046" +
    "\062\047\030\001\002\000\046\005\uffeb\010\uffeb\011\uffeb" +
    "\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020" +
    "\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb" +
    "\027\uffeb\030\uffeb\001\002\000\032\005\uffcf\010\uffcf\011" +
    "\uffcf\012\uffcf\021\144\022\143\023\142\024\141\025\uffcf" +
    "\026\uffcf\027\uffcf\030\uffcf\001\002\000\022\005\uffc4\010" +
    "\uffc4\011\uffc4\012\uffc4\025\137\026\136\027\uffc4\030\uffc4" +
    "\001\002\000\016\005\uffc5\010\uffc5\011\uffc5\012\uffc5\027" +
    "\uffc5\030\uffc5\001\002\000\016\005\uffc6\010\uffc6\011\uffc6" +
    "\012\uffc6\027\uffc6\030\uffc6\001\002\000\046\005\uffe9\010" +
    "\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9" +
    "\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025" +
    "\uffe9\026\uffe9\027\uffe9\030\uffe9\001\002\000\016\005\uffcd" +
    "\010\uffcd\011\uffcd\012\uffcd\027\uffcd\030\uffcd\001\002\000" +
    "\016\005\uffcb\010\uffcb\011\uffcb\012\uffcb\027\134\030\uffcb" +
    "\001\002\000\014\005\uffc9\010\uffc9\011\uffc9\012\131\030" +
    "\130\001\002\000\010\005\uffc7\010\uffc7\011\uffc7\001\002" +
    "\000\010\005\uffc8\010\uffc8\011\uffc8\001\002\000\052\004" +
    "\ufff5\006\ufff5\007\ufff5\013\ufff5\014\ufff5\015\ufff5\031\ufff5" +
    "\032\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5\041" +
    "\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5\046\ufff5\047\ufff5" +
    "\001\002\000\004\004\124\001\002\000\004\011\123\001" +
    "\002\000\046\005\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8" +
    "\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022" +
    "\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8" +
    "\001\002\000\026\004\033\013\027\014\026\015\025\034" +
    "\055\041\052\044\041\045\034\046\062\047\030\001\002" +
    "\000\004\004\113\001\002\000\046\005\uffe7\010\uffe7\011" +
    "\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7" +
    "\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026" +
    "\uffe7\027\uffe7\030\uffe7\001\002\000\046\005\uffe1\010\uffe1" +
    "\011\uffe1\012\uffe1\013\112\014\111\015\uffe1\016\uffe1\017" +
    "\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1" +
    "\026\uffe1\027\uffe1\030\uffe1\001\002\000\004\047\076\001" +
    "\002\000\042\005\uffdd\010\uffdd\011\uffdd\012\uffdd\015\uffdd" +
    "\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024" +
    "\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\001\002\000\042" +
    "\005\uffda\010\uffda\011\uffda\012\uffda\015\uffda\016\uffda\017" +
    "\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda" +
    "\026\uffda\027\uffda\030\uffda\001\002\000\046\005\uffea\010" +
    "\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea" +
    "\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025" +
    "\uffea\026\uffea\027\uffea\030\uffea\001\002\000\042\005\uffd7" +
    "\010\uffd7\011\uffd7\012\uffd7\015\uffd7\016\071\017\072\020" +
    "\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7" +
    "\027\uffd7\030\uffd7\001\002\000\036\005\uffc3\010\uffc3\011" +
    "\uffc3\012\uffc3\015\066\020\067\021\uffc3\022\uffc3\023\uffc3" +
    "\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\001\002\000" +
    "\032\005\uffd2\010\uffd2\011\uffd2\012\uffd2\021\uffd2\022\uffd2" +
    "\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\001" +
    "\002\000\026\004\033\013\027\014\026\015\025\034\055" +
    "\041\052\044\041\045\034\046\062\047\030\001\002\000" +
    "\026\004\033\013\027\014\026\015\025\034\055\041\052" +
    "\044\041\045\034\046\062\047\030\001\002\000\042\005" +
    "\uffd9\010\uffd9\011\uffd9\012\uffd9\015\uffd9\016\071\017\072" +
    "\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026" +
    "\uffd9\027\uffd9\030\uffd9\001\002\000\026\004\033\013\027" +
    "\014\026\015\025\034\055\041\052\044\041\045\034\046" +
    "\062\047\030\001\002\000\026\004\033\013\027\014\026" +
    "\015\025\034\055\041\052\044\041\045\034\046\062\047" +
    "\030\001\002\000\042\005\uffdb\010\uffdb\011\uffdb\012\uffdb" +
    "\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023" +
    "\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\001\002" +
    "\000\042\005\uffdc\010\uffdc\011\uffdc\012\uffdc\015\uffdc\016" +
    "\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc" +
    "\025\uffdc\026\uffdc\027\uffdc\030\uffdc\001\002\000\042\005" +
    "\uffd8\010\uffd8\011\uffd8\012\uffd8\015\uffd8\016\071\017\072" +
    "\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026" +
    "\uffd8\027\uffd8\030\uffd8\001\002\000\010\010\077\011\101" +
    "\012\100\001\002\000\006\011\ufff9\047\105\001\002\000" +
    "\026\004\033\013\027\014\026\015\025\034\055\041\052" +
    "\044\041\045\034\046\062\047\030\001\002\000\054\004" +
    "\ufff2\006\ufff2\007\ufff2\013\ufff2\014\ufff2\015\ufff2\031\ufff2" +
    "\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040" +
    "\ufff2\041\ufff2\042\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2" +
    "\047\ufff2\001\002\000\004\011\103\001\002\000\054\004" +
    "\ufff0\006\ufff0\007\ufff0\013\ufff0\014\ufff0\015\ufff0\031\ufff0" +
    "\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040" +
    "\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0\045\ufff0\046\ufff0" +
    "\047\ufff0\001\002\000\004\011\110\001\002\000\006\010" +
    "\106\011\ufff8\001\002\000\006\011\ufff9\047\105\001\002" +
    "\000\004\011\ufff7\001\002\000\054\004\ufff1\006\ufff1\007" +
    "\ufff1\013\ufff1\014\ufff1\015\ufff1\031\ufff1\032\ufff1\033\ufff1" +
    "\034\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1\042" +
    "\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1\001\002" +
    "\000\042\005\uffe2\010\uffe2\011\uffe2\012\uffe2\015\uffe2\016" +
    "\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2" +
    "\025\uffe2\026\uffe2\027\uffe2\030\uffe2\001\002\000\042\005" +
    "\uffe3\010\uffe3\011\uffe3\012\uffe3\015\uffe3\016\uffe3\017\uffe3" +
    "\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026" +
    "\uffe3\027\uffe3\030\uffe3\001\002\000\026\004\033\013\027" +
    "\014\026\015\025\034\055\041\052\044\041\045\034\046" +
    "\062\047\030\001\002\000\004\005\115\001\002\000\050" +
    "\004\033\006\032\013\027\014\026\015\025\031\007\032" +
    "\006\034\055\035\054\036\014\037\053\040\013\041\052" +
    "\042\012\043\050\044\041\045\034\046\062\047\030\001" +
    "\002\000\004\033\117\001\002\000\050\004\033\006\032" +
    "\013\027\014\026\015\025\031\007\032\006\034\055\035" +
    "\054\036\014\037\053\040\013\041\052\042\012\043\050" +
    "\044\041\045\034\046\062\047\030\001\002\000\054\004" +
    "\uffec\006\uffec\007\uffec\013\uffec\014\uffec\015\uffec\031\uffec" +
    "\032\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040" +
    "\uffec\041\uffec\042\uffec\043\uffec\044\uffec\045\uffec\046\uffec" +
    "\047\uffec\001\002\000\004\011\122\001\002\000\054\004" +
    "\uffef\006\uffef\007\uffef\013\uffef\014\uffef\015\uffef\031\uffef" +
    "\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef\040" +
    "\uffef\041\uffef\042\uffef\043\uffef\044\uffef\045\uffef\046\uffef" +
    "\047\uffef\001\002\000\054\004\ufff3\006\ufff3\007\ufff3\013" +
    "\ufff3\014\ufff3\015\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3" +
    "\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\042\ufff3\043" +
    "\ufff3\044\ufff3\045\ufff3\046\ufff3\047\ufff3\001\002\000\026" +
    "\004\033\013\027\014\026\015\025\034\055\041\052\044" +
    "\041\045\034\046\062\047\030\001\002\000\004\005\126" +
    "\001\002\000\050\004\033\006\032\013\027\014\026\015" +
    "\025\031\007\032\006\034\055\035\054\036\014\037\053" +
    "\040\013\041\052\042\012\043\050\044\041\045\034\046" +
    "\062\047\030\001\002\000\054\004\uffee\006\uffee\007\uffee" +
    "\013\uffee\014\uffee\015\uffee\031\uffee\032\uffee\033\uffee\034" +
    "\uffee\035\uffee\036\uffee\037\uffee\040\uffee\041\uffee\042\uffee" +
    "\043\uffee\044\uffee\045\uffee\046\uffee\047\uffee\001\002\000" +
    "\026\004\033\013\027\014\026\015\025\034\055\041\052" +
    "\044\041\045\034\046\062\047\030\001\002\000\026\004" +
    "\033\013\027\014\026\015\025\034\055\041\052\044\041" +
    "\045\034\046\062\047\030\001\002\000\010\005\uffca\010" +
    "\uffca\011\uffca\001\002\000\016\005\uffcc\010\uffcc\011\uffcc" +
    "\012\uffcc\027\134\030\uffcc\001\002\000\026\004\033\013" +
    "\027\014\026\015\025\034\055\041\052\044\041\045\034" +
    "\046\062\047\030\001\002\000\016\005\uffce\010\uffce\011" +
    "\uffce\012\uffce\027\uffce\030\uffce\001\002\000\026\004\033" +
    "\013\027\014\026\015\025\034\055\041\052\044\041\045" +
    "\034\046\062\047\030\001\002\000\026\004\033\013\027" +
    "\014\026\015\025\034\055\041\052\044\041\045\034\046" +
    "\062\047\030\001\002\000\032\005\uffd1\010\uffd1\011\uffd1" +
    "\012\uffd1\021\144\022\143\023\142\024\141\025\uffd1\026" +
    "\uffd1\027\uffd1\030\uffd1\001\002\000\026\004\033\013\027" +
    "\014\026\015\025\034\055\041\052\044\041\045\034\046" +
    "\062\047\030\001\002\000\026\004\033\013\027\014\026" +
    "\015\025\034\055\041\052\044\041\045\034\046\062\047" +
    "\030\001\002\000\026\004\033\013\027\014\026\015\025" +
    "\034\055\041\052\044\041\045\034\046\062\047\030\001" +
    "\002\000\026\004\033\013\027\014\026\015\025\034\055" +
    "\041\052\044\041\045\034\046\062\047\030\001\002\000" +
    "\032\005\uffd6\010\uffd6\011\uffd6\012\uffd6\021\uffd6\022\uffd6" +
    "\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\001" +
    "\002\000\032\005\uffd5\010\uffd5\011\uffd5\012\uffd5\021\uffd5" +
    "\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030" +
    "\uffd5\001\002\000\032\005\uffd4\010\uffd4\011\uffd4\012\uffd4" +
    "\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027" +
    "\uffd4\030\uffd4\001\002\000\032\005\uffd3\010\uffd3\011\uffd3" +
    "\012\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026" +
    "\uffd3\027\uffd3\030\uffd3\001\002\000\032\005\uffd0\010\uffd0" +
    "\011\uffd0\012\uffd0\021\144\022\143\023\142\024\141\025" +
    "\uffd0\026\uffd0\027\uffd0\030\uffd0\001\002\000\004\005\153" +
    "\001\002\000\046\005\uffe4\010\uffe4\011\uffe4\012\uffe4\013" +
    "\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4" +
    "\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030" +
    "\uffe4\001\002\000\052\004\033\006\032\007\155\013\027" +
    "\014\026\015\025\031\007\032\006\034\055\035\054\036" +
    "\014\037\053\040\013\041\052\042\012\043\050\044\041" +
    "\045\034\046\062\047\030\001\002\000\054\004\uffed\006" +
    "\uffed\007\uffed\013\uffed\014\uffed\015\uffed\031\uffed\032\uffed" +
    "\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed\040\uffed\041" +
    "\uffed\042\uffed\043\uffed\044\uffed\045\uffed\046\uffed\047\uffed" +
    "\001\002\000\030\004\033\005\uffc2\013\027\014\026\015" +
    "\025\034\055\041\052\044\041\045\034\046\062\047\030" +
    "\001\002\000\004\005\163\001\002\000\006\005\uffc1\010" +
    "\161\001\002\000\030\004\033\005\uffc2\013\027\014\026" +
    "\015\025\034\055\041\052\044\041\045\034\046\062\047" +
    "\030\001\002\000\004\005\uffc0\001\002\000\046\005\uffe5" +
    "\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016" +
    "\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5" +
    "\025\uffe5\026\uffe5\027\uffe5\030\uffe5\001\002\000\042\005" +
    "\uffe0\010\uffe0\011\uffe0\012\uffe0\015\uffe0\016\uffe0\017\uffe0" +
    "\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026" +
    "\uffe0\027\uffe0\030\uffe0\001\002\000\042\005\uffdf\010\uffdf" +
    "\011\uffdf\012\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021" +
    "\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf" +
    "\030\uffdf\001\002\000\042\005\uffde\010\uffde\011\uffde\012" +
    "\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde" +
    "\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\001" +
    "\002\000\016\005\ufffc\031\007\032\006\036\014\040\013" +
    "\042\012\001\002\000\004\005\ufffa\001\002\000\006\005" +
    "\ufff4\010\ufff4\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\170\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\006\004\010\033\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\020\010\017\033\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\023\001\001\000\046\011\046\012" +
    "\055\013\057\014\060\015\062\016\063\017\034\020\035" +
    "\021\042\022\043\023\044\024\050\025\045\026\041\027" +
    "\037\030\036\031\064\033\056\001\001\000\006\012\055" +
    "\013\165\001\001\000\006\012\055\013\164\001\001\000" +
    "\006\012\055\013\163\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\153\001\001\000\042\012\055\013" +
    "\057\014\060\015\062\016\063\017\034\020\035\021\042" +
    "\022\043\023\044\024\151\025\045\026\041\027\037\030" +
    "\036\031\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\012\055\013\057\014\060\015\062\016\063\017" +
    "\034\020\035\021\042\022\043\023\044\024\120\025\045" +
    "\026\041\027\037\030\036\031\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\012\055\013\057\014\060\015\074\001\001\000\012\012" +
    "\055\013\057\014\060\015\067\001\001\000\002\001\001" +
    "\000\010\012\055\013\057\014\073\001\001\000\010\012" +
    "\055\013\057\014\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\103\001\001\000\042\012\055\013\057\014\060\015\062" +
    "\016\063\017\034\020\035\021\042\022\043\023\044\024" +
    "\101\025\045\026\041\027\037\030\036\031\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\012\055\013\057\014\060\015\062" +
    "\016\063\017\034\020\035\021\042\022\043\023\044\024" +
    "\113\025\045\026\041\027\037\030\036\031\064\001\001" +
    "\000\002\001\001\000\046\011\115\012\055\013\057\014" +
    "\060\015\062\016\063\017\034\020\035\021\042\022\043" +
    "\023\044\024\050\025\045\026\041\027\037\030\036\031" +
    "\064\033\056\001\001\000\002\001\001\000\046\011\117" +
    "\012\055\013\057\014\060\015\062\016\063\017\034\020" +
    "\035\021\042\022\043\023\044\024\050\025\045\026\041" +
    "\027\037\030\036\031\064\033\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\012\055\013\057\014\060\015\062\016\063\017" +
    "\034\020\035\021\042\022\043\023\044\024\124\025\045" +
    "\026\041\027\037\030\036\031\064\001\001\000\002\001" +
    "\001\000\046\011\126\012\055\013\057\014\060\015\062" +
    "\016\063\017\034\020\035\021\042\022\043\023\044\024" +
    "\050\025\045\026\041\027\037\030\036\031\064\033\056" +
    "\001\001\000\002\001\001\000\032\012\055\013\057\014" +
    "\060\015\062\016\063\017\034\020\035\021\132\026\041" +
    "\027\037\030\036\031\064\001\001\000\036\012\055\013" +
    "\057\014\060\015\062\016\063\017\034\020\035\021\042" +
    "\022\043\023\131\026\041\027\037\030\036\031\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\012\055" +
    "\013\057\014\060\015\062\016\063\017\034\020\035\026" +
    "\134\027\037\030\036\031\064\001\001\000\002\001\001" +
    "\000\020\012\055\013\057\014\060\015\062\016\063\017" +
    "\150\031\064\001\001\000\020\012\055\013\057\014\060" +
    "\015\062\016\063\017\137\031\064\001\001\000\002\001" +
    "\001\000\016\012\055\013\057\014\060\015\062\016\063" +
    "\031\147\001\001\000\016\012\055\013\057\014\060\015" +
    "\062\016\063\031\146\001\001\000\016\012\055\013\057" +
    "\014\060\015\062\016\063\031\145\001\001\000\016\012" +
    "\055\013\057\014\060\015\062\016\063\031\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\011\046\012\055\013\057\014\060\015" +
    "\062\016\063\017\034\020\035\021\042\022\043\023\044" +
    "\024\050\025\045\026\041\027\037\030\036\031\064\033" +
    "\056\001\001\000\002\001\001\000\044\012\055\013\057" +
    "\014\060\015\062\016\063\017\034\020\035\021\042\022" +
    "\043\023\044\024\157\025\045\026\041\027\037\030\036" +
    "\031\064\032\156\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\012\055\013\057\014\060\015\062\016\063" +
    "\017\034\020\035\021\042\022\043\023\044\024\157\025" +
    "\045\026\041\027\037\030\036\031\064\032\161\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\167\010\017" +
    "\033\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public c_like.Absyn.Program pProgram() throws Exception
  {
    java_cup.runtime.Symbol res = parse();
    return (c_like.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
  report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
  throw new Exception("Unrecoverable Syntax Error");
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


public java_cup.runtime.ComplexSymbolFactory.Location getLeftLocation(
    java_cup.runtime.ComplexSymbolFactory.Location ... locations) {
  for (java_cup.runtime.ComplexSymbolFactory.Location l : locations) {
    if (l != null) {
      return l;
    }
  }
  return null;
}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		c_like.Absyn.Program start_val = (c_like.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= ListDef 
            {
              c_like.Absyn.Program RESULT =null;
		c_like.Absyn.ListDef p_1 = (c_like.Absyn.ListDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new c_like.Absyn.Pdefs(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ListDef ::= 
            {
              c_like.Absyn.ListDef RESULT =null;
		 RESULT = new c_like.Absyn.ListDef(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDef",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ListDef ::= ListDef Def 
            {
              c_like.Absyn.ListDef RESULT =null;
		c_like.Absyn.ListDef p_1 = (c_like.Absyn.ListDef)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		c_like.Absyn.Def p_2 = (c_like.Absyn.Def)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDef",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Def ::= Type Id _SYMB_0 ListArg _SYMB_1 _SYMB_2 ListStm _SYMB_3 
            {
              c_like.Absyn.Def RESULT =null;
		c_like.Absyn.Type p_1 = (c_like.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		c_like.Absyn.ListArg p_4 = (c_like.Absyn.ListArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Object p_5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Object p_6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		c_like.Absyn.ListStm p_7 = (c_like.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_8 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new c_like.Absyn.DFun(p_1,p_2,p_4,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ListArg ::= 
            {
              c_like.Absyn.ListArg RESULT =null;
		 RESULT = new c_like.Absyn.ListArg(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListArg",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ListArg ::= Arg 
            {
              c_like.Absyn.ListArg RESULT =null;
		c_like.Absyn.Arg p_1 = (c_like.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new c_like.Absyn.ListArg(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListArg",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ListArg ::= Arg _SYMB_4 ListArg 
            {
              c_like.Absyn.ListArg RESULT =null;
		c_like.Absyn.Arg p_1 = (c_like.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		c_like.Absyn.ListArg p_3 = (c_like.Absyn.ListArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListArg",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ListId ::= 
            {
              c_like.Absyn.ListId RESULT =null;
		 RESULT = new c_like.Absyn.ListId(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListId",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ListId ::= Id 
            {
              c_like.Absyn.ListId RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new c_like.Absyn.ListId(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListId",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ListId ::= Id _SYMB_4 ListId 
            {
              c_like.Absyn.ListId RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		c_like.Absyn.ListId p_3 = (c_like.Absyn.ListId)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListId",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ListStm ::= 
            {
              c_like.Absyn.ListStm RESULT =null;
		 RESULT = new c_like.Absyn.ListStm(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListStm",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ListStm ::= ListStm Stm 
            {
              c_like.Absyn.ListStm RESULT =null;
		c_like.Absyn.ListStm p_1 = (c_like.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		c_like.Absyn.Stm p_2 = (c_like.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListStm",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Arg ::= Type Id 
            {
              c_like.Absyn.Arg RESULT =null;
		c_like.Absyn.Type p_1 = (c_like.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new c_like.Absyn.ADecl(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Stm ::= Exp _SYMB_5 
            {
              c_like.Absyn.Stm RESULT =null;
		c_like.Absyn.Exp p_1 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new c_like.Absyn.SExp(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Stm ::= Type Id _SYMB_5 
            {
              c_like.Absyn.Stm RESULT =null;
		c_like.Absyn.Type p_1 = (c_like.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new c_like.Absyn.SDecl(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Stm ::= Type Id _SYMB_4 ListId _SYMB_5 
            {
              c_like.Absyn.Stm RESULT =null;
		c_like.Absyn.Type p_1 = (c_like.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		c_like.Absyn.ListId p_4 = (c_like.Absyn.ListId)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new c_like.Absyn.SDecls(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Stm ::= Type Id _SYMB_6 Exp _SYMB_5 
            {
              c_like.Absyn.Stm RESULT =null;
		c_like.Absyn.Type p_1 = (c_like.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		c_like.Absyn.Exp p_4 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new c_like.Absyn.SInit(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Stm ::= _SYMB_27 Exp _SYMB_5 
            {
              c_like.Absyn.Stm RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		c_like.Absyn.Exp p_2 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new c_like.Absyn.SReturn(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Stm ::= _SYMB_31 _SYMB_0 Exp _SYMB_1 Stm 
            {
              c_like.Absyn.Stm RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		c_like.Absyn.Exp p_3 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		c_like.Absyn.Stm p_5 = (c_like.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new c_like.Absyn.SWhile(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Stm ::= _SYMB_2 ListStm _SYMB_3 
            {
              c_like.Absyn.Stm RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		c_like.Absyn.ListStm p_2 = (c_like.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new c_like.Absyn.SBlock(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Stm ::= _SYMB_25 _SYMB_0 Exp _SYMB_1 Stm _SYMB_23 Stm 
            {
              c_like.Absyn.Stm RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		c_like.Absyn.Exp p_3 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		c_like.Absyn.Stm p_5 = (c_like.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		c_like.Absyn.Stm p_7 = (c_like.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new c_like.Absyn.SIfElse(p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Exp15 ::= _INTEGER_ 
            {
              c_like.Absyn.Exp RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new c_like.Absyn.EInt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp15",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Exp15 ::= _DOUBLE_ 
            {
              c_like.Absyn.Exp RESULT =null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new c_like.Absyn.EDouble(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp15",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Exp15 ::= _STRING_ 
            {
              c_like.Absyn.Exp RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new c_like.Absyn.EString(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp15",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Exp15 ::= _SYMB_29 
            {
              c_like.Absyn.Exp RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new c_like.Absyn.ETrue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp15",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Exp15 ::= _SYMB_24 
            {
              c_like.Absyn.Exp RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new c_like.Absyn.EFalse(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp15",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Exp15 ::= Id 
            {
              c_like.Absyn.Exp RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new c_like.Absyn.EId(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp15",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Exp15 ::= Id _SYMB_0 ListExp _SYMB_1 
            {
              c_like.Absyn.Exp RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		c_like.Absyn.ListExp p_3 = (c_like.Absyn.ListExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new c_like.Absyn.ECall(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp15",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Exp15 ::= _SYMB_0 Exp _SYMB_1 
            {
              c_like.Absyn.Exp RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		c_like.Absyn.Exp p_2 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp15",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Exp14 ::= Exp15 _SYMB_7 
            {
              c_like.Absyn.Exp RESULT =null;
		c_like.Absyn.Exp p_1 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new c_like.Absyn.EPIncr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp14",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Exp14 ::= Exp15 _SYMB_8 
            {
              c_like.Absyn.Exp RESULT =null;
		c_like.Absyn.Exp p_1 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new c_like.Absyn.EPDecr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp14",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Exp14 ::= Exp15 
            {
              c_like.Absyn.Exp RESULT =null;
		c_like.Absyn.Exp p_1 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp14",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Exp13 ::= _SYMB_7 Exp14 
            {
              c_like.Absyn.Exp RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		c_like.Absyn.Exp p_2 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new c_like.Absyn.EIncr(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp13",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Exp13 ::= _SYMB_8 Exp14 
            {
              c_like.Absyn.Exp RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		c_like.Absyn.Exp p_2 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new c_like.Absyn.EDecr(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp13",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Exp13 ::= _SYMB_9 Exp14 
            {
              c_like.Absyn.Exp RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		c_like.Absyn.Exp p_2 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new c_like.Absyn.ENeg(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp13",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Exp13 ::= Exp14 
            {
              c_like.Absyn.Exp RESULT =null;
		c_like.Absyn.Exp p_1 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp13",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Exp12 ::= Exp12 _SYMB_10 Exp13 
            {
              c_like.Absyn.Exp RESULT =null;
		c_like.Absyn.Exp p_1 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		c_like.Absyn.Exp p_3 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new c_like.Absyn.EMul(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp12",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Exp12 ::= Exp12 _SYMB_11 Exp13 
            {
              c_like.Absyn.Exp RESULT =null;
		c_like.Absyn.Exp p_1 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		c_like.Absyn.Exp p_3 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new c_like.Absyn.EDiv(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp12",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Exp12 ::= Exp13 
            {
              c_like.Absyn.Exp RESULT =null;
		c_like.Absyn.Exp p_1 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp12",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Exp11 ::= Exp11 _SYMB_12 Exp12 
            {
              c_like.Absyn.Exp RESULT =null;
		c_like.Absyn.Exp p_1 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		c_like.Absyn.Exp p_3 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new c_like.Absyn.EAdd(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp11",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Exp11 ::= Exp11 _SYMB_9 Exp12 
            {
              c_like.Absyn.Exp RESULT =null;
		c_like.Absyn.Exp p_1 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		c_like.Absyn.Exp p_3 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new c_like.Absyn.ESub(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp11",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Exp11 ::= Exp12 
            {
              c_like.Absyn.Exp RESULT =null;
		c_like.Absyn.Exp p_1 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp11",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Exp9 ::= Exp9 _SYMB_13 Exp10 
            {
              c_like.Absyn.Exp RESULT =null;
		c_like.Absyn.Exp p_1 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		c_like.Absyn.Exp p_3 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new c_like.Absyn.ELt(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp9",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Exp9 ::= Exp9 _SYMB_14 Exp10 
            {
              c_like.Absyn.Exp RESULT =null;
		c_like.Absyn.Exp p_1 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		c_like.Absyn.Exp p_3 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new c_like.Absyn.EGt(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp9",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Exp9 ::= Exp9 _SYMB_15 Exp10 
            {
              c_like.Absyn.Exp RESULT =null;
		c_like.Absyn.Exp p_1 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		c_like.Absyn.Exp p_3 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new c_like.Absyn.ELEq(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp9",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Exp9 ::= Exp9 _SYMB_16 Exp10 
            {
              c_like.Absyn.Exp RESULT =null;
		c_like.Absyn.Exp p_1 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		c_like.Absyn.Exp p_3 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new c_like.Absyn.EGEq(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp9",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Exp9 ::= Exp10 
            {
              c_like.Absyn.Exp RESULT =null;
		c_like.Absyn.Exp p_1 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp9",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Exp8 ::= Exp8 _SYMB_17 Exp9 
            {
              c_like.Absyn.Exp RESULT =null;
		c_like.Absyn.Exp p_1 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		c_like.Absyn.Exp p_3 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new c_like.Absyn.EEq(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp8",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Exp8 ::= Exp8 _SYMB_18 Exp9 
            {
              c_like.Absyn.Exp RESULT =null;
		c_like.Absyn.Exp p_1 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		c_like.Absyn.Exp p_3 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new c_like.Absyn.ENEq(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp8",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Exp8 ::= Exp9 
            {
              c_like.Absyn.Exp RESULT =null;
		c_like.Absyn.Exp p_1 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp8",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Exp4 ::= Exp4 _SYMB_19 Exp5 
            {
              c_like.Absyn.Exp RESULT =null;
		c_like.Absyn.Exp p_1 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		c_like.Absyn.Exp p_3 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new c_like.Absyn.EAnd(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp4",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Exp4 ::= Exp5 
            {
              c_like.Absyn.Exp RESULT =null;
		c_like.Absyn.Exp p_1 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp4",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Exp3 ::= Exp3 _SYMB_20 Exp4 
            {
              c_like.Absyn.Exp RESULT =null;
		c_like.Absyn.Exp p_1 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		c_like.Absyn.Exp p_3 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new c_like.Absyn.EOr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp3",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Exp3 ::= Exp4 
            {
              c_like.Absyn.Exp RESULT =null;
		c_like.Absyn.Exp p_1 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp3",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Exp2 ::= Exp3 _SYMB_6 Exp2 
            {
              c_like.Absyn.Exp RESULT =null;
		c_like.Absyn.Exp p_1 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		c_like.Absyn.Exp p_3 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new c_like.Absyn.EAss(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp2",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Exp2 ::= Exp3 
            {
              c_like.Absyn.Exp RESULT =null;
		c_like.Absyn.Exp p_1 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp2",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Exp ::= Exp1 
            {
              c_like.Absyn.Exp RESULT =null;
		c_like.Absyn.Exp p_1 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Exp1 ::= Exp2 
            {
              c_like.Absyn.Exp RESULT =null;
		c_like.Absyn.Exp p_1 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp1",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Exp5 ::= Exp6 
            {
              c_like.Absyn.Exp RESULT =null;
		c_like.Absyn.Exp p_1 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp5",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Exp6 ::= Exp7 
            {
              c_like.Absyn.Exp RESULT =null;
		c_like.Absyn.Exp p_1 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp6",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Exp7 ::= Exp8 
            {
              c_like.Absyn.Exp RESULT =null;
		c_like.Absyn.Exp p_1 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp7",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Exp10 ::= Exp11 
            {
              c_like.Absyn.Exp RESULT =null;
		c_like.Absyn.Exp p_1 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp10",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ListExp ::= 
            {
              c_like.Absyn.ListExp RESULT =null;
		 RESULT = new c_like.Absyn.ListExp(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExp",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ListExp ::= Exp 
            {
              c_like.Absyn.ListExp RESULT =null;
		c_like.Absyn.Exp p_1 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new c_like.Absyn.ListExp(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExp",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ListExp ::= Exp _SYMB_4 ListExp 
            {
              c_like.Absyn.ListExp RESULT =null;
		c_like.Absyn.Exp p_1 = (c_like.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		c_like.Absyn.ListExp p_3 = (c_like.Absyn.ListExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExp",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Type ::= _SYMB_21 
            {
              c_like.Absyn.Type RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new c_like.Absyn.Tbool(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Type ::= _SYMB_22 
            {
              c_like.Absyn.Type RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new c_like.Absyn.Tdouble(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Type ::= _SYMB_26 
            {
              c_like.Absyn.Type RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new c_like.Absyn.Tint(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Type ::= _SYMB_28 
            {
              c_like.Absyn.Type RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new c_like.Absyn.Tstring(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Type ::= _SYMB_30 
            {
              c_like.Absyn.Type RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new c_like.Absyn.Tvoid(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",25, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
