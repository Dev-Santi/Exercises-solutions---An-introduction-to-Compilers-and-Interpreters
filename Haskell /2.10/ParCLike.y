-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParCLike where
import AbsCLike
import LexCLike
import ErrM

}

%name pProgram Program
%name pListDef ListDef
%name pDef Def
%name pListArg ListArg
%name pListId ListId
%name pListStm ListStm
%name pArg Arg
%name pStm Stm
%name pExp15 Exp15
%name pExp14 Exp14
%name pExp13 Exp13
%name pExp12 Exp12
%name pExp11 Exp11
%name pExp9 Exp9
%name pExp8 Exp8
%name pExp4 Exp4
%name pExp3 Exp3
%name pExp2 Exp2
%name pExp Exp
%name pExp1 Exp1
%name pExp5 Exp5
%name pExp6 Exp6
%name pExp7 Exp7
%name pExp10 Exp10
%name pListExp ListExp
%name pType Type
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '!=' { PT _ (TS _ 1) }
  '&&' { PT _ (TS _ 2) }
  '(' { PT _ (TS _ 3) }
  ')' { PT _ (TS _ 4) }
  '*' { PT _ (TS _ 5) }
  '+' { PT _ (TS _ 6) }
  '++' { PT _ (TS _ 7) }
  ',' { PT _ (TS _ 8) }
  '-' { PT _ (TS _ 9) }
  '--' { PT _ (TS _ 10) }
  '/' { PT _ (TS _ 11) }
  ';' { PT _ (TS _ 12) }
  '<' { PT _ (TS _ 13) }
  '<=' { PT _ (TS _ 14) }
  '=' { PT _ (TS _ 15) }
  '==' { PT _ (TS _ 16) }
  '>' { PT _ (TS _ 17) }
  '>=' { PT _ (TS _ 18) }
  'bool' { PT _ (TS _ 19) }
  'double' { PT _ (TS _ 20) }
  'else' { PT _ (TS _ 21) }
  'false' { PT _ (TS _ 22) }
  'if' { PT _ (TS _ 23) }
  'int' { PT _ (TS _ 24) }
  'return' { PT _ (TS _ 25) }
  'string' { PT _ (TS _ 26) }
  'true' { PT _ (TS _ 27) }
  'void' { PT _ (TS _ 28) }
  'while' { PT _ (TS _ 29) }
  '{' { PT _ (TS _ 30) }
  '||' { PT _ (TS _ 31) }
  '}' { PT _ (TS _ 32) }
  L_integ  { PT _ (TI $$) }
  L_doubl  { PT _ (TD $$) }
  L_quoted { PT _ (TL $$) }
  L_Id { PT _ (T_Id _) }

%%

Integer :: { Integer }
Integer  : L_integ  { (read ( $1)) :: Integer }

Double  :: { Double }
Double   : L_doubl  { (read ( $1)) :: Double }

String  :: { String }
String   : L_quoted {  $1 }

Id :: { Id}
Id  : L_Id { Id (mkPosToken $1)}

Program :: { Program }
Program : ListDef { AbsCLike.Pdefs (reverse $1) }
ListDef :: { [Def] }
ListDef : {- empty -} { [] } | ListDef Def { flip (:) $1 $2 }
Def :: { Def }
Def : Type Id '(' ListArg ')' '{' ListStm '}' { AbsCLike.DFun $1 $2 $4 (reverse $7) }
ListArg :: { [Arg] }
ListArg : {- empty -} { [] }
        | Arg { (:[]) $1 }
        | Arg ',' ListArg { (:) $1 $3 }
ListId :: { [Id] }
ListId : {- empty -} { [] }
       | Id { (:[]) $1 }
       | Id ',' ListId { (:) $1 $3 }
ListStm :: { [Stm] }
ListStm : {- empty -} { [] } | ListStm Stm { flip (:) $1 $2 }
Arg :: { Arg }
Arg : Type Id { AbsCLike.ADecl $1 $2 }
Stm :: { Stm }
Stm : Exp ';' { AbsCLike.SExp $1 }
    | Type Id ';' { AbsCLike.SDecl $1 $2 }
    | Type Id ',' ListId ';' { AbsCLike.SDecls $1 $2 $4 }
    | Type Id '=' Exp ';' { AbsCLike.SInit $1 $2 $4 }
    | 'return' Exp ';' { AbsCLike.SReturn $2 }
    | 'while' '(' Exp ')' Stm { AbsCLike.SWhile $3 $5 }
    | '{' ListStm '}' { AbsCLike.SBlock (reverse $2) }
    | 'if' '(' Exp ')' Stm 'else' Stm { AbsCLike.SIfElse $3 $5 $7 }
Exp15 :: { Exp }
Exp15 : Integer { AbsCLike.EInt $1 }
      | Double { AbsCLike.EDouble $1 }
      | String { AbsCLike.EString $1 }
      | 'true' { AbsCLike.ETrue }
      | 'false' { AbsCLike.EFalse }
      | Id { AbsCLike.EId $1 }
      | Id '(' ListExp ')' { AbsCLike.ECall $1 $3 }
      | '(' Exp ')' { $2 }
Exp14 :: { Exp }
Exp14 : Exp15 '++' { AbsCLike.EPIncr $1 }
      | Exp15 '--' { AbsCLike.EPDecr $1 }
      | Exp15 { $1 }
Exp13 :: { Exp }
Exp13 : '++' Exp14 { AbsCLike.EIncr $2 }
      | '--' Exp14 { AbsCLike.EDecr $2 }
      | '-' Exp14 { AbsCLike.ENeg $2 }
      | Exp14 { $1 }
Exp12 :: { Exp }
Exp12 : Exp12 '*' Exp13 { AbsCLike.EMul $1 $3 }
      | Exp12 '/' Exp13 { AbsCLike.EDiv $1 $3 }
      | Exp13 { $1 }
Exp11 :: { Exp }
Exp11 : Exp11 '+' Exp12 { AbsCLike.EAdd $1 $3 }
      | Exp11 '-' Exp12 { AbsCLike.ESub $1 $3 }
      | Exp12 { $1 }
Exp9 :: { Exp }
Exp9 : Exp9 '<' Exp10 { AbsCLike.ELt $1 $3 }
     | Exp9 '>' Exp10 { AbsCLike.EGt $1 $3 }
     | Exp9 '<=' Exp10 { AbsCLike.ELEq $1 $3 }
     | Exp9 '>=' Exp10 { AbsCLike.EGEq $1 $3 }
     | Exp10 { $1 }
Exp8 :: { Exp }
Exp8 : Exp8 '==' Exp9 { AbsCLike.EEq $1 $3 }
     | Exp8 '!=' Exp9 { AbsCLike.ENEq $1 $3 }
     | Exp9 { $1 }
Exp4 :: { Exp }
Exp4 : Exp4 '&&' Exp5 { AbsCLike.EAnd $1 $3 } | Exp5 { $1 }
Exp3 :: { Exp }
Exp3 : Exp3 '||' Exp4 { AbsCLike.EOr $1 $3 } | Exp4 { $1 }
Exp2 :: { Exp }
Exp2 : Exp3 '=' Exp2 { AbsCLike.EAss $1 $3 } | Exp3 { $1 }
Exp :: { Exp }
Exp : Exp1 { $1 }
Exp1 :: { Exp }
Exp1 : Exp2 { $1 }
Exp5 :: { Exp }
Exp5 : Exp6 { $1 }
Exp6 :: { Exp }
Exp6 : Exp7 { $1 }
Exp7 :: { Exp }
Exp7 : Exp8 { $1 }
Exp10 :: { Exp }
Exp10 : Exp11 { $1 }
ListExp :: { [Exp] }
ListExp : {- empty -} { [] }
        | Exp { (:[]) $1 }
        | Exp ',' ListExp { (:) $1 $3 }
Type :: { Type }
Type : 'bool' { AbsCLike.Tbool }
     | 'double' { AbsCLike.Tdouble }
     | 'int' { AbsCLike.Tint }
     | 'string' { AbsCLike.Tstring }
     | 'void' { AbsCLike.Tvoid }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ id(prToken t) ++ "'"

myLexer = tokens
}

